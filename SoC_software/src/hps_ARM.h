#ifndef _ALTERA_HPS_ARM_H_
#define _ALTERA_HPS_ARM_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'ARM' in
 * file 'ARM.sopcinfo'.
 */

/*
 * This file contains macros for module 'hps_ARM' and devices
 * connected to the following masters:
 *   h2f_axi_master
 *   h2f_lw_axi_master
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'fifo_f2h_DAQ_64b_out', class 'altera_avalon_fifo'
 * The macros are prefixed with 'FIFO_F2H_DAQ_64B_OUT_'.
 * The prefix is the slave descriptor.
 */
#define FIFO_F2H_DAQ_64B_OUT_COMPONENT_TYPE altera_avalon_fifo
#define FIFO_F2H_DAQ_64B_OUT_COMPONENT_NAME fifo_f2h_DAQ_64b
#define FIFO_F2H_DAQ_64B_OUT_BASE 0x0
#define FIFO_F2H_DAQ_64B_OUT_SPAN 8
#define FIFO_F2H_DAQ_64B_OUT_END 0x7
#define FIFO_F2H_DAQ_64B_OUT_AVALONMM_AVALONMM_DATA_WIDTH 64
#define FIFO_F2H_DAQ_64B_OUT_AVALONMM_AVALONST_DATA_WIDTH 32
#define FIFO_F2H_DAQ_64B_OUT_BITS_PER_SYMBOL 32
#define FIFO_F2H_DAQ_64B_OUT_CHANNEL_WIDTH 0
#define FIFO_F2H_DAQ_64B_OUT_ERROR_WIDTH 0
#define FIFO_F2H_DAQ_64B_OUT_FIFO_DEPTH 8192
#define FIFO_F2H_DAQ_64B_OUT_SINGLE_CLOCK_MODE 0
#define FIFO_F2H_DAQ_64B_OUT_SYMBOLS_PER_BEAT 1
#define FIFO_F2H_DAQ_64B_OUT_USE_AVALONMM_READ_SLAVE 1
#define FIFO_F2H_DAQ_64B_OUT_USE_AVALONMM_WRITE_SLAVE 0
#define FIFO_F2H_DAQ_64B_OUT_USE_AVALONST_SINK 1
#define FIFO_F2H_DAQ_64B_OUT_USE_AVALONST_SOURCE 0
#define FIFO_F2H_DAQ_64B_OUT_USE_BACKPRESSURE 1
#define FIFO_F2H_DAQ_64B_OUT_USE_IRQ 0
#define FIFO_F2H_DAQ_64B_OUT_USE_PACKET 0
#define FIFO_F2H_DAQ_64B_OUT_USE_READ_CONTROL 1
#define FIFO_F2H_DAQ_64B_OUT_USE_REGISTER 0
#define FIFO_F2H_DAQ_64B_OUT_USE_WRITE_CONTROL 1

/*
 * Macros for device 'fifo_FPGA_to_HPS_out', class 'altera_avalon_fifo'
 * The macros are prefixed with 'FIFO_FPGA_TO_HPS_OUT_'.
 * The prefix is the slave descriptor.
 */
#define FIFO_FPGA_TO_HPS_OUT_COMPONENT_TYPE altera_avalon_fifo
#define FIFO_FPGA_TO_HPS_OUT_COMPONENT_NAME fifo_FPGA_to_HPS
#define FIFO_FPGA_TO_HPS_OUT_BASE 0x10
#define FIFO_FPGA_TO_HPS_OUT_SPAN 8
#define FIFO_FPGA_TO_HPS_OUT_END 0x17
#define FIFO_FPGA_TO_HPS_OUT_AVALONMM_AVALONMM_DATA_WIDTH 32
#define FIFO_FPGA_TO_HPS_OUT_AVALONMM_AVALONST_DATA_WIDTH 32
#define FIFO_FPGA_TO_HPS_OUT_BITS_PER_SYMBOL 18
#define FIFO_FPGA_TO_HPS_OUT_CHANNEL_WIDTH 0
#define FIFO_FPGA_TO_HPS_OUT_ERROR_WIDTH 0
#define FIFO_FPGA_TO_HPS_OUT_FIFO_DEPTH 2048
#define FIFO_FPGA_TO_HPS_OUT_SINGLE_CLOCK_MODE 0
#define FIFO_FPGA_TO_HPS_OUT_SYMBOLS_PER_BEAT 1
#define FIFO_FPGA_TO_HPS_OUT_USE_AVALONMM_READ_SLAVE 1
#define FIFO_FPGA_TO_HPS_OUT_USE_AVALONMM_WRITE_SLAVE 0
#define FIFO_FPGA_TO_HPS_OUT_USE_AVALONST_SINK 1
#define FIFO_FPGA_TO_HPS_OUT_USE_AVALONST_SOURCE 0
#define FIFO_FPGA_TO_HPS_OUT_USE_BACKPRESSURE 1
#define FIFO_FPGA_TO_HPS_OUT_USE_IRQ 0
#define FIFO_FPGA_TO_HPS_OUT_USE_PACKET 0
#define FIFO_FPGA_TO_HPS_OUT_USE_READ_CONTROL 1
#define FIFO_FPGA_TO_HPS_OUT_USE_REGISTER 0
#define FIFO_FPGA_TO_HPS_OUT_USE_WRITE_CONTROL 1

/*
 * Macros for device 'fifo_FPGA_to_HPS_out_csr', class 'altera_avalon_fifo'
 * The macros are prefixed with 'FIFO_FPGA_TO_HPS_OUT_CSR_'.
 * The prefix is the slave descriptor.
 */
#define FIFO_FPGA_TO_HPS_OUT_CSR_COMPONENT_TYPE altera_avalon_fifo
#define FIFO_FPGA_TO_HPS_OUT_CSR_COMPONENT_NAME fifo_FPGA_to_HPS
#define FIFO_FPGA_TO_HPS_OUT_CSR_BASE 0x20
#define FIFO_FPGA_TO_HPS_OUT_CSR_SPAN 32
#define FIFO_FPGA_TO_HPS_OUT_CSR_END 0x3f
#define FIFO_FPGA_TO_HPS_OUT_CSR_AVALONMM_AVALONMM_DATA_WIDTH 32
#define FIFO_FPGA_TO_HPS_OUT_CSR_AVALONMM_AVALONST_DATA_WIDTH 32
#define FIFO_FPGA_TO_HPS_OUT_CSR_BITS_PER_SYMBOL 18
#define FIFO_FPGA_TO_HPS_OUT_CSR_CHANNEL_WIDTH 0
#define FIFO_FPGA_TO_HPS_OUT_CSR_ERROR_WIDTH 0
#define FIFO_FPGA_TO_HPS_OUT_CSR_FIFO_DEPTH 2048
#define FIFO_FPGA_TO_HPS_OUT_CSR_SINGLE_CLOCK_MODE 0
#define FIFO_FPGA_TO_HPS_OUT_CSR_SYMBOLS_PER_BEAT 1
#define FIFO_FPGA_TO_HPS_OUT_CSR_USE_AVALONMM_READ_SLAVE 1
#define FIFO_FPGA_TO_HPS_OUT_CSR_USE_AVALONMM_WRITE_SLAVE 0
#define FIFO_FPGA_TO_HPS_OUT_CSR_USE_AVALONST_SINK 1
#define FIFO_FPGA_TO_HPS_OUT_CSR_USE_AVALONST_SOURCE 0
#define FIFO_FPGA_TO_HPS_OUT_CSR_USE_BACKPRESSURE 1
#define FIFO_FPGA_TO_HPS_OUT_CSR_USE_IRQ 0
#define FIFO_FPGA_TO_HPS_OUT_CSR_USE_PACKET 0
#define FIFO_FPGA_TO_HPS_OUT_CSR_USE_READ_CONTROL 1
#define FIFO_FPGA_TO_HPS_OUT_CSR_USE_REGISTER 0
#define FIFO_FPGA_TO_HPS_OUT_CSR_USE_WRITE_CONTROL 1

/*
 * Macros for device 'fifo_HPS_to_FPGA_in_csr', class 'altera_avalon_fifo'
 * The macros are prefixed with 'FIFO_HPS_TO_FPGA_IN_CSR_'.
 * The prefix is the slave descriptor.
 */
#define FIFO_HPS_TO_FPGA_IN_CSR_COMPONENT_TYPE altera_avalon_fifo
#define FIFO_HPS_TO_FPGA_IN_CSR_COMPONENT_NAME fifo_HPS_to_FPGA
#define FIFO_HPS_TO_FPGA_IN_CSR_BASE 0x60
#define FIFO_HPS_TO_FPGA_IN_CSR_SPAN 32
#define FIFO_HPS_TO_FPGA_IN_CSR_END 0x7f
#define FIFO_HPS_TO_FPGA_IN_CSR_AVALONMM_AVALONMM_DATA_WIDTH 32
#define FIFO_HPS_TO_FPGA_IN_CSR_AVALONMM_AVALONST_DATA_WIDTH 32
#define FIFO_HPS_TO_FPGA_IN_CSR_BITS_PER_SYMBOL 18
#define FIFO_HPS_TO_FPGA_IN_CSR_CHANNEL_WIDTH 0
#define FIFO_HPS_TO_FPGA_IN_CSR_ERROR_WIDTH 0
#define FIFO_HPS_TO_FPGA_IN_CSR_FIFO_DEPTH 2048
#define FIFO_HPS_TO_FPGA_IN_CSR_SINGLE_CLOCK_MODE 0
#define FIFO_HPS_TO_FPGA_IN_CSR_SYMBOLS_PER_BEAT 1
#define FIFO_HPS_TO_FPGA_IN_CSR_USE_AVALONMM_READ_SLAVE 0
#define FIFO_HPS_TO_FPGA_IN_CSR_USE_AVALONMM_WRITE_SLAVE 1
#define FIFO_HPS_TO_FPGA_IN_CSR_USE_AVALONST_SINK 0
#define FIFO_HPS_TO_FPGA_IN_CSR_USE_AVALONST_SOURCE 1
#define FIFO_HPS_TO_FPGA_IN_CSR_USE_BACKPRESSURE 1
#define FIFO_HPS_TO_FPGA_IN_CSR_USE_IRQ 0
#define FIFO_HPS_TO_FPGA_IN_CSR_USE_PACKET 1
#define FIFO_HPS_TO_FPGA_IN_CSR_USE_READ_CONTROL 1
#define FIFO_HPS_TO_FPGA_IN_CSR_USE_REGISTER 0
#define FIFO_HPS_TO_FPGA_IN_CSR_USE_WRITE_CONTROL 1

/*
 * Macros for device 'led_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'LED_PIO_'.
 * The prefix is the slave descriptor.
 */
#define LED_PIO_COMPONENT_TYPE altera_avalon_pio
#define LED_PIO_COMPONENT_NAME led_pio
#define LED_PIO_BASE 0x80
#define LED_PIO_SPAN 32
#define LED_PIO_END 0x9f
#define LED_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define LED_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define LED_PIO_CAPTURE 0
#define LED_PIO_DATA_WIDTH 8
#define LED_PIO_DO_TEST_BENCH_WIRING 0
#define LED_PIO_DRIVEN_SIM_VALUE 0
#define LED_PIO_EDGE_TYPE NONE
#define LED_PIO_FREQ 50000000
#define LED_PIO_HAS_IN 0
#define LED_PIO_HAS_OUT 1
#define LED_PIO_HAS_TRI 0
#define LED_PIO_IRQ_TYPE NONE
#define LED_PIO_RESET_VALUE 0

/*
 * Macros for device 'dipsw_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'DIPSW_PIO_'.
 * The prefix is the slave descriptor.
 */
#define DIPSW_PIO_COMPONENT_TYPE altera_avalon_pio
#define DIPSW_PIO_COMPONENT_NAME dipsw_pio
#define DIPSW_PIO_BASE 0xa0
#define DIPSW_PIO_SPAN 32
#define DIPSW_PIO_END 0xbf
#define DIPSW_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define DIPSW_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define DIPSW_PIO_CAPTURE 0
#define DIPSW_PIO_DATA_WIDTH 8
#define DIPSW_PIO_DO_TEST_BENCH_WIRING 0
#define DIPSW_PIO_DRIVEN_SIM_VALUE 0
#define DIPSW_PIO_EDGE_TYPE NONE
#define DIPSW_PIO_FREQ 50000000
#define DIPSW_PIO_HAS_IN 1
#define DIPSW_PIO_HAS_OUT 0
#define DIPSW_PIO_HAS_TRI 0
#define DIPSW_PIO_IRQ_TYPE NONE
#define DIPSW_PIO_RESET_VALUE 0

/*
 * Macros for device 'button_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'BUTTON_PIO_'.
 * The prefix is the slave descriptor.
 */
#define BUTTON_PIO_COMPONENT_TYPE altera_avalon_pio
#define BUTTON_PIO_COMPONENT_NAME button_pio
#define BUTTON_PIO_BASE 0xc0
#define BUTTON_PIO_SPAN 32
#define BUTTON_PIO_END 0xdf
#define BUTTON_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define BUTTON_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define BUTTON_PIO_CAPTURE 0
#define BUTTON_PIO_DATA_WIDTH 8
#define BUTTON_PIO_DO_TEST_BENCH_WIRING 0
#define BUTTON_PIO_DRIVEN_SIM_VALUE 0
#define BUTTON_PIO_EDGE_TYPE NONE
#define BUTTON_PIO_FREQ 50000000
#define BUTTON_PIO_HAS_IN 1
#define BUTTON_PIO_HAS_OUT 0
#define BUTTON_PIO_HAS_TRI 0
#define BUTTON_PIO_IRQ_TYPE NONE
#define BUTTON_PIO_RESET_VALUE 0

/*
 * Macros for device 'sysid_qsys_0', class 'altera_avalon_sysid_qsys'
 * The macros are prefixed with 'SYSID_QSYS_0_'.
 * The prefix is the slave descriptor.
 */
#define SYSID_QSYS_0_COMPONENT_TYPE altera_avalon_sysid_qsys
#define SYSID_QSYS_0_COMPONENT_NAME sysid_qsys_0
#define SYSID_QSYS_0_BASE 0xe0
#define SYSID_QSYS_0_SPAN 8
#define SYSID_QSYS_0_END 0xe7
#define SYSID_QSYS_0_ID 591751049
#define SYSID_QSYS_0_TIMESTAMP 1514988962

/*
 * Macros for device 'fifo_F2H_DAQ_out_csr', class 'altera_avalon_fifo'
 * The macros are prefixed with 'FIFO_F2H_DAQ_OUT_CSR_'.
 * The prefix is the slave descriptor.
 */
#define FIFO_F2H_DAQ_OUT_CSR_COMPONENT_TYPE altera_avalon_fifo
#define FIFO_F2H_DAQ_OUT_CSR_COMPONENT_NAME fifo_F2H_DAQ
#define FIFO_F2H_DAQ_OUT_CSR_BASE 0x100
#define FIFO_F2H_DAQ_OUT_CSR_SPAN 32
#define FIFO_F2H_DAQ_OUT_CSR_END 0x11f
#define FIFO_F2H_DAQ_OUT_CSR_AVALONMM_AVALONMM_DATA_WIDTH 32
#define FIFO_F2H_DAQ_OUT_CSR_AVALONMM_AVALONST_DATA_WIDTH 32
#define FIFO_F2H_DAQ_OUT_CSR_BITS_PER_SYMBOL 32
#define FIFO_F2H_DAQ_OUT_CSR_CHANNEL_WIDTH 0
#define FIFO_F2H_DAQ_OUT_CSR_ERROR_WIDTH 0
#define FIFO_F2H_DAQ_OUT_CSR_FIFO_DEPTH 8192
#define FIFO_F2H_DAQ_OUT_CSR_SINGLE_CLOCK_MODE 0
#define FIFO_F2H_DAQ_OUT_CSR_SYMBOLS_PER_BEAT 1
#define FIFO_F2H_DAQ_OUT_CSR_USE_AVALONMM_READ_SLAVE 1
#define FIFO_F2H_DAQ_OUT_CSR_USE_AVALONMM_WRITE_SLAVE 0
#define FIFO_F2H_DAQ_OUT_CSR_USE_AVALONST_SINK 1
#define FIFO_F2H_DAQ_OUT_CSR_USE_AVALONST_SOURCE 0
#define FIFO_F2H_DAQ_OUT_CSR_USE_BACKPRESSURE 1
#define FIFO_F2H_DAQ_OUT_CSR_USE_IRQ 0
#define FIFO_F2H_DAQ_OUT_CSR_USE_PACKET 0
#define FIFO_F2H_DAQ_OUT_CSR_USE_READ_CONTROL 1
#define FIFO_F2H_DAQ_OUT_CSR_USE_REGISTER 0
#define FIFO_F2H_DAQ_OUT_CSR_USE_WRITE_CONTROL 1

/*
 * Macros for device 'fifo_f2h_DAQ_64b_out_csr', class 'altera_avalon_fifo'
 * The macros are prefixed with 'FIFO_F2H_DAQ_64B_OUT_CSR_'.
 * The prefix is the slave descriptor.
 */
#define FIFO_F2H_DAQ_64B_OUT_CSR_COMPONENT_TYPE altera_avalon_fifo
#define FIFO_F2H_DAQ_64B_OUT_CSR_COMPONENT_NAME fifo_f2h_DAQ_64b
#define FIFO_F2H_DAQ_64B_OUT_CSR_BASE 0x120
#define FIFO_F2H_DAQ_64B_OUT_CSR_SPAN 32
#define FIFO_F2H_DAQ_64B_OUT_CSR_END 0x13f
#define FIFO_F2H_DAQ_64B_OUT_CSR_AVALONMM_AVALONMM_DATA_WIDTH 64
#define FIFO_F2H_DAQ_64B_OUT_CSR_AVALONMM_AVALONST_DATA_WIDTH 32
#define FIFO_F2H_DAQ_64B_OUT_CSR_BITS_PER_SYMBOL 32
#define FIFO_F2H_DAQ_64B_OUT_CSR_CHANNEL_WIDTH 0
#define FIFO_F2H_DAQ_64B_OUT_CSR_ERROR_WIDTH 0
#define FIFO_F2H_DAQ_64B_OUT_CSR_FIFO_DEPTH 8192
#define FIFO_F2H_DAQ_64B_OUT_CSR_SINGLE_CLOCK_MODE 0
#define FIFO_F2H_DAQ_64B_OUT_CSR_SYMBOLS_PER_BEAT 1
#define FIFO_F2H_DAQ_64B_OUT_CSR_USE_AVALONMM_READ_SLAVE 1
#define FIFO_F2H_DAQ_64B_OUT_CSR_USE_AVALONMM_WRITE_SLAVE 0
#define FIFO_F2H_DAQ_64B_OUT_CSR_USE_AVALONST_SINK 1
#define FIFO_F2H_DAQ_64B_OUT_CSR_USE_AVALONST_SOURCE 0
#define FIFO_F2H_DAQ_64B_OUT_CSR_USE_BACKPRESSURE 1
#define FIFO_F2H_DAQ_64B_OUT_CSR_USE_IRQ 0
#define FIFO_F2H_DAQ_64B_OUT_CSR_USE_PACKET 0
#define FIFO_F2H_DAQ_64B_OUT_CSR_USE_READ_CONTROL 1
#define FIFO_F2H_DAQ_64B_OUT_CSR_USE_REGISTER 0
#define FIFO_F2H_DAQ_64B_OUT_CSR_USE_WRITE_CONTROL 1

/*
 * Macros for device 'sgdma_0', class 'altera_avalon_sgdma'
 * The macros are prefixed with 'SGDMA_0_'.
 * The prefix is the slave descriptor.
 */
#define SGDMA_0_COMPONENT_TYPE altera_avalon_sgdma
#define SGDMA_0_COMPONENT_NAME sgdma_0
#define SGDMA_0_BASE 0x140
#define SGDMA_0_SPAN 64
#define SGDMA_0_END 0x17f
#define SGDMA_0_ADDRESS_WIDTH 32
#define SGDMA_0_ALWAYS_DO_MAX_BURST 1
#define SGDMA_0_ATLANTIC_CHANNEL_DATA_WIDTH 4
#define SGDMA_0_AVALON_MM_BYTE_REORDER_MODE 0
#define SGDMA_0_BURST_DATA_WIDTH 8
#define SGDMA_0_BURST_TRANSFER 1
#define SGDMA_0_BYTES_TO_TRANSFER_DATA_WIDTH 16
#define SGDMA_0_CHAIN_WRITEBACK_DATA_WIDTH 32
#define SGDMA_0_COMMAND_FIFO_DATA_WIDTH 104
#define SGDMA_0_CONTROL_DATA_WIDTH 8
#define SGDMA_0_CONTROL_SLAVE_ADDRESS_WIDTH 4
#define SGDMA_0_CONTROL_SLAVE_DATA_WIDTH 32
#define SGDMA_0_DESCRIPTOR_READ_BURST 1
#define SGDMA_0_DESC_DATA_WIDTH 32
#define SGDMA_0_HAS_READ_BLOCK 0
#define SGDMA_0_HAS_WRITE_BLOCK 1
#define SGDMA_0_IN_ERROR_WIDTH 0
#define SGDMA_0_OUT_ERROR_WIDTH 0
#define SGDMA_0_READ_BLOCK_DATA_WIDTH 32
#define SGDMA_0_READ_BURSTCOUNT_WIDTH 4
#define SGDMA_0_STATUS_TOKEN_DATA_WIDTH 24
#define SGDMA_0_STREAM_DATA_WIDTH 32
#define SGDMA_0_SYMBOLS_PER_BEAT 4
#define SGDMA_0_UNALIGNED_TRANSFER 0
#define SGDMA_0_WRITE_BLOCK_DATA_WIDTH 32
#define SGDMA_0_WRITE_BURSTCOUNT_WIDTH 12

/*
 * Macros for device 'hps_ARM_axi_sdram', class 'axi_sdram'
 * Path to the device is from the master group 'sgdma_0_m_write'.
 * The macros are prefixed with 'SGDMA_0_M_WRITE_HPS_ARM_AXI_SDRAM_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_0_M_WRITE_HPS_ARM_AXI_SDRAM_COMPONENT_TYPE axi_sdram
#define SGDMA_0_M_WRITE_HPS_ARM_AXI_SDRAM_COMPONENT_NAME hps_ARM_axi_sdram
#define SGDMA_0_M_WRITE_HPS_ARM_AXI_SDRAM_BASE 0x0
#define SGDMA_0_M_WRITE_HPS_ARM_AXI_SDRAM_SPAN 0x80000000
#define SGDMA_0_M_WRITE_HPS_ARM_AXI_SDRAM_END 0x7fffffff
#define SGDMA_0_M_WRITE_HPS_ARM_AXI_SDRAM_SIZE_MULTIPLE 1
#define SGDMA_0_M_WRITE_HPS_ARM_AXI_SDRAM_SIZE_VALUE 1<<31
#define SGDMA_0_M_WRITE_HPS_ARM_AXI_SDRAM_WRITABLE 1
#define SGDMA_0_M_WRITE_HPS_ARM_AXI_SDRAM_MEMORY_INFO_GENERATE_DAT_SYM 0
#define SGDMA_0_M_WRITE_HPS_ARM_AXI_SDRAM_MEMORY_INFO_GENERATE_HEX 0
#define SGDMA_0_M_WRITE_HPS_ARM_AXI_SDRAM_MEMORY_INFO_MEM_INIT_DATA_WIDTH 31

/*
 * Macros for device 'hps_ARM_gmac0', class 'stmmac'
 * Path to the device is from the master group 'sgdma_0_m_write'.
 * The macros are prefixed with 'SGDMA_0_M_WRITE_HPS_ARM_GMAC0_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_0_M_WRITE_HPS_ARM_GMAC0_COMPONENT_TYPE stmmac
#define SGDMA_0_M_WRITE_HPS_ARM_GMAC0_COMPONENT_NAME hps_ARM_gmac0
#define SGDMA_0_M_WRITE_HPS_ARM_GMAC0_BASE 0xff700000
#define SGDMA_0_M_WRITE_HPS_ARM_GMAC0_SPAN 8192
#define SGDMA_0_M_WRITE_HPS_ARM_GMAC0_END 0xff701fff

/*
 * Macros for device 'hps_ARM_gmac1', class 'stmmac'
 * Path to the device is from the master group 'sgdma_0_m_write'.
 * The macros are prefixed with 'SGDMA_0_M_WRITE_HPS_ARM_GMAC1_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_0_M_WRITE_HPS_ARM_GMAC1_COMPONENT_TYPE stmmac
#define SGDMA_0_M_WRITE_HPS_ARM_GMAC1_COMPONENT_NAME hps_ARM_gmac1
#define SGDMA_0_M_WRITE_HPS_ARM_GMAC1_BASE 0xff702000
#define SGDMA_0_M_WRITE_HPS_ARM_GMAC1_SPAN 8192
#define SGDMA_0_M_WRITE_HPS_ARM_GMAC1_END 0xff703fff

/*
 * Macros for device 'hps_ARM_sdmmc', class 'sdmmc'
 * Path to the device is from the master group 'sgdma_0_m_write'.
 * The macros are prefixed with 'SGDMA_0_M_WRITE_HPS_ARM_SDMMC_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_0_M_WRITE_HPS_ARM_SDMMC_COMPONENT_TYPE sdmmc
#define SGDMA_0_M_WRITE_HPS_ARM_SDMMC_COMPONENT_NAME hps_ARM_sdmmc
#define SGDMA_0_M_WRITE_HPS_ARM_SDMMC_BASE 0xff704000
#define SGDMA_0_M_WRITE_HPS_ARM_SDMMC_SPAN 4096
#define SGDMA_0_M_WRITE_HPS_ARM_SDMMC_END 0xff704fff

/*
 * Macros for device 'hps_ARM_qspi', class 'qspi'
 * Path to the device is from the master group 'sgdma_0_m_write'.
 * The macros are prefixed with 'SGDMA_0_M_WRITE_HPS_ARM_QSPI_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_0_M_WRITE_HPS_ARM_QSPI_COMPONENT_TYPE qspi
#define SGDMA_0_M_WRITE_HPS_ARM_QSPI_COMPONENT_NAME hps_ARM_qspi
#define SGDMA_0_M_WRITE_HPS_ARM_QSPI_BASE 0xff705000
#define SGDMA_0_M_WRITE_HPS_ARM_QSPI_SPAN 256
#define SGDMA_0_M_WRITE_HPS_ARM_QSPI_END 0xff7050ff

/*
 * Macros for device 'hps_ARM_fpgamgr', class 'fpgamgr'
 * Path to the device is from the master group 'sgdma_0_m_write'.
 * The macros are prefixed with 'SGDMA_0_M_WRITE_HPS_ARM_FPGAMGR_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_0_M_WRITE_HPS_ARM_FPGAMGR_COMPONENT_TYPE fpgamgr
#define SGDMA_0_M_WRITE_HPS_ARM_FPGAMGR_COMPONENT_NAME hps_ARM_fpgamgr
#define SGDMA_0_M_WRITE_HPS_ARM_FPGAMGR_BASE 0xff706000
#define SGDMA_0_M_WRITE_HPS_ARM_FPGAMGR_SPAN 4096
#define SGDMA_0_M_WRITE_HPS_ARM_FPGAMGR_END 0xff706fff

/*
 * Macros for device 'hps_ARM_gpio0', class 'dw_gpio'
 * Path to the device is from the master group 'sgdma_0_m_write'.
 * The macros are prefixed with 'SGDMA_0_M_WRITE_HPS_ARM_GPIO0_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_0_M_WRITE_HPS_ARM_GPIO0_COMPONENT_TYPE dw_gpio
#define SGDMA_0_M_WRITE_HPS_ARM_GPIO0_COMPONENT_NAME hps_ARM_gpio0
#define SGDMA_0_M_WRITE_HPS_ARM_GPIO0_BASE 0xff708000
#define SGDMA_0_M_WRITE_HPS_ARM_GPIO0_SPAN 256
#define SGDMA_0_M_WRITE_HPS_ARM_GPIO0_END 0xff7080ff

/*
 * Macros for device 'hps_ARM_gpio1', class 'dw_gpio'
 * Path to the device is from the master group 'sgdma_0_m_write'.
 * The macros are prefixed with 'SGDMA_0_M_WRITE_HPS_ARM_GPIO1_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_0_M_WRITE_HPS_ARM_GPIO1_COMPONENT_TYPE dw_gpio
#define SGDMA_0_M_WRITE_HPS_ARM_GPIO1_COMPONENT_NAME hps_ARM_gpio1
#define SGDMA_0_M_WRITE_HPS_ARM_GPIO1_BASE 0xff709000
#define SGDMA_0_M_WRITE_HPS_ARM_GPIO1_SPAN 256
#define SGDMA_0_M_WRITE_HPS_ARM_GPIO1_END 0xff7090ff

/*
 * Macros for device 'hps_ARM_gpio2', class 'dw_gpio'
 * Path to the device is from the master group 'sgdma_0_m_write'.
 * The macros are prefixed with 'SGDMA_0_M_WRITE_HPS_ARM_GPIO2_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_0_M_WRITE_HPS_ARM_GPIO2_COMPONENT_TYPE dw_gpio
#define SGDMA_0_M_WRITE_HPS_ARM_GPIO2_COMPONENT_NAME hps_ARM_gpio2
#define SGDMA_0_M_WRITE_HPS_ARM_GPIO2_BASE 0xff70a000
#define SGDMA_0_M_WRITE_HPS_ARM_GPIO2_SPAN 256
#define SGDMA_0_M_WRITE_HPS_ARM_GPIO2_END 0xff70a0ff

/*
 * Macros for device 'hps_ARM_l3regs', class 'l3regs'
 * Path to the device is from the master group 'sgdma_0_m_write'.
 * The macros are prefixed with 'SGDMA_0_M_WRITE_HPS_ARM_L3REGS_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_0_M_WRITE_HPS_ARM_L3REGS_COMPONENT_TYPE l3regs
#define SGDMA_0_M_WRITE_HPS_ARM_L3REGS_COMPONENT_NAME hps_ARM_l3regs
#define SGDMA_0_M_WRITE_HPS_ARM_L3REGS_BASE 0xff800000
#define SGDMA_0_M_WRITE_HPS_ARM_L3REGS_SPAN 4096
#define SGDMA_0_M_WRITE_HPS_ARM_L3REGS_END 0xff800fff

/*
 * Macros for device 'hps_ARM_nand0', class 'denali_nand'
 * Path to the device is from the master group 'sgdma_0_m_write'.
 * The macros are prefixed with 'SGDMA_0_M_WRITE_HPS_ARM_NAND0_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_0_M_WRITE_HPS_ARM_NAND0_COMPONENT_TYPE denali_nand
#define SGDMA_0_M_WRITE_HPS_ARM_NAND0_COMPONENT_NAME hps_ARM_nand0
#define SGDMA_0_M_WRITE_HPS_ARM_NAND0_BASE 0xff900000
#define SGDMA_0_M_WRITE_HPS_ARM_NAND0_SPAN 65536
#define SGDMA_0_M_WRITE_HPS_ARM_NAND0_END 0xff90ffff

/*
 * Macros for device 'hps_ARM_usb0', class 'usb'
 * Path to the device is from the master group 'sgdma_0_m_write'.
 * The macros are prefixed with 'SGDMA_0_M_WRITE_HPS_ARM_USB0_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_0_M_WRITE_HPS_ARM_USB0_COMPONENT_TYPE usb
#define SGDMA_0_M_WRITE_HPS_ARM_USB0_COMPONENT_NAME hps_ARM_usb0
#define SGDMA_0_M_WRITE_HPS_ARM_USB0_BASE 0xffb00000
#define SGDMA_0_M_WRITE_HPS_ARM_USB0_SPAN 262144
#define SGDMA_0_M_WRITE_HPS_ARM_USB0_END 0xffb3ffff

/*
 * Macros for device 'hps_ARM_usb1', class 'usb'
 * Path to the device is from the master group 'sgdma_0_m_write'.
 * The macros are prefixed with 'SGDMA_0_M_WRITE_HPS_ARM_USB1_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_0_M_WRITE_HPS_ARM_USB1_COMPONENT_TYPE usb
#define SGDMA_0_M_WRITE_HPS_ARM_USB1_COMPONENT_NAME hps_ARM_usb1
#define SGDMA_0_M_WRITE_HPS_ARM_USB1_BASE 0xffb40000
#define SGDMA_0_M_WRITE_HPS_ARM_USB1_SPAN 262144
#define SGDMA_0_M_WRITE_HPS_ARM_USB1_END 0xffb7ffff

/*
 * Macros for device 'hps_ARM_dcan0', class 'bosch_dcan'
 * Path to the device is from the master group 'sgdma_0_m_write'.
 * The macros are prefixed with 'SGDMA_0_M_WRITE_HPS_ARM_DCAN0_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_0_M_WRITE_HPS_ARM_DCAN0_COMPONENT_TYPE bosch_dcan
#define SGDMA_0_M_WRITE_HPS_ARM_DCAN0_COMPONENT_NAME hps_ARM_dcan0
#define SGDMA_0_M_WRITE_HPS_ARM_DCAN0_BASE 0xffc00000
#define SGDMA_0_M_WRITE_HPS_ARM_DCAN0_SPAN 4096
#define SGDMA_0_M_WRITE_HPS_ARM_DCAN0_END 0xffc00fff

/*
 * Macros for device 'hps_ARM_dcan1', class 'bosch_dcan'
 * Path to the device is from the master group 'sgdma_0_m_write'.
 * The macros are prefixed with 'SGDMA_0_M_WRITE_HPS_ARM_DCAN1_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_0_M_WRITE_HPS_ARM_DCAN1_COMPONENT_TYPE bosch_dcan
#define SGDMA_0_M_WRITE_HPS_ARM_DCAN1_COMPONENT_NAME hps_ARM_dcan1
#define SGDMA_0_M_WRITE_HPS_ARM_DCAN1_BASE 0xffc01000
#define SGDMA_0_M_WRITE_HPS_ARM_DCAN1_SPAN 4096
#define SGDMA_0_M_WRITE_HPS_ARM_DCAN1_END 0xffc01fff

/*
 * Macros for device 'hps_ARM_uart0', class 'snps_uart'
 * Path to the device is from the master group 'sgdma_0_m_write'.
 * The macros are prefixed with 'SGDMA_0_M_WRITE_HPS_ARM_UART0_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_0_M_WRITE_HPS_ARM_UART0_COMPONENT_TYPE snps_uart
#define SGDMA_0_M_WRITE_HPS_ARM_UART0_COMPONENT_NAME hps_ARM_uart0
#define SGDMA_0_M_WRITE_HPS_ARM_UART0_BASE 0xffc02000
#define SGDMA_0_M_WRITE_HPS_ARM_UART0_SPAN 256
#define SGDMA_0_M_WRITE_HPS_ARM_UART0_END 0xffc020ff
#define SGDMA_0_M_WRITE_HPS_ARM_UART0_FIFO_DEPTH 128
#define SGDMA_0_M_WRITE_HPS_ARM_UART0_FIFO_HWFC 0
#define SGDMA_0_M_WRITE_HPS_ARM_UART0_FIFO_MODE 1
#define SGDMA_0_M_WRITE_HPS_ARM_UART0_FIFO_SWFC 0
#define SGDMA_0_M_WRITE_HPS_ARM_UART0_FREQ 100000000

/*
 * Macros for device 'hps_ARM_uart1', class 'snps_uart'
 * Path to the device is from the master group 'sgdma_0_m_write'.
 * The macros are prefixed with 'SGDMA_0_M_WRITE_HPS_ARM_UART1_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_0_M_WRITE_HPS_ARM_UART1_COMPONENT_TYPE snps_uart
#define SGDMA_0_M_WRITE_HPS_ARM_UART1_COMPONENT_NAME hps_ARM_uart1
#define SGDMA_0_M_WRITE_HPS_ARM_UART1_BASE 0xffc03000
#define SGDMA_0_M_WRITE_HPS_ARM_UART1_SPAN 256
#define SGDMA_0_M_WRITE_HPS_ARM_UART1_END 0xffc030ff
#define SGDMA_0_M_WRITE_HPS_ARM_UART1_FIFO_DEPTH 128
#define SGDMA_0_M_WRITE_HPS_ARM_UART1_FIFO_HWFC 0
#define SGDMA_0_M_WRITE_HPS_ARM_UART1_FIFO_MODE 1
#define SGDMA_0_M_WRITE_HPS_ARM_UART1_FIFO_SWFC 0
#define SGDMA_0_M_WRITE_HPS_ARM_UART1_FREQ 100000000

/*
 * Macros for device 'hps_ARM_i2c0', class 'designware_i2c'
 * Path to the device is from the master group 'sgdma_0_m_write'.
 * The macros are prefixed with 'SGDMA_0_M_WRITE_HPS_ARM_I2C0_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_0_M_WRITE_HPS_ARM_I2C0_COMPONENT_TYPE designware_i2c
#define SGDMA_0_M_WRITE_HPS_ARM_I2C0_COMPONENT_NAME hps_ARM_i2c0
#define SGDMA_0_M_WRITE_HPS_ARM_I2C0_BASE 0xffc04000
#define SGDMA_0_M_WRITE_HPS_ARM_I2C0_SPAN 256
#define SGDMA_0_M_WRITE_HPS_ARM_I2C0_END 0xffc040ff

/*
 * Macros for device 'hps_ARM_i2c1', class 'designware_i2c'
 * Path to the device is from the master group 'sgdma_0_m_write'.
 * The macros are prefixed with 'SGDMA_0_M_WRITE_HPS_ARM_I2C1_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_0_M_WRITE_HPS_ARM_I2C1_COMPONENT_TYPE designware_i2c
#define SGDMA_0_M_WRITE_HPS_ARM_I2C1_COMPONENT_NAME hps_ARM_i2c1
#define SGDMA_0_M_WRITE_HPS_ARM_I2C1_BASE 0xffc05000
#define SGDMA_0_M_WRITE_HPS_ARM_I2C1_SPAN 256
#define SGDMA_0_M_WRITE_HPS_ARM_I2C1_END 0xffc050ff

/*
 * Macros for device 'hps_ARM_i2c2', class 'designware_i2c'
 * Path to the device is from the master group 'sgdma_0_m_write'.
 * The macros are prefixed with 'SGDMA_0_M_WRITE_HPS_ARM_I2C2_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_0_M_WRITE_HPS_ARM_I2C2_COMPONENT_TYPE designware_i2c
#define SGDMA_0_M_WRITE_HPS_ARM_I2C2_COMPONENT_NAME hps_ARM_i2c2
#define SGDMA_0_M_WRITE_HPS_ARM_I2C2_BASE 0xffc06000
#define SGDMA_0_M_WRITE_HPS_ARM_I2C2_SPAN 256
#define SGDMA_0_M_WRITE_HPS_ARM_I2C2_END 0xffc060ff

/*
 * Macros for device 'hps_ARM_i2c3', class 'designware_i2c'
 * Path to the device is from the master group 'sgdma_0_m_write'.
 * The macros are prefixed with 'SGDMA_0_M_WRITE_HPS_ARM_I2C3_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_0_M_WRITE_HPS_ARM_I2C3_COMPONENT_TYPE designware_i2c
#define SGDMA_0_M_WRITE_HPS_ARM_I2C3_COMPONENT_NAME hps_ARM_i2c3
#define SGDMA_0_M_WRITE_HPS_ARM_I2C3_BASE 0xffc07000
#define SGDMA_0_M_WRITE_HPS_ARM_I2C3_SPAN 256
#define SGDMA_0_M_WRITE_HPS_ARM_I2C3_END 0xffc070ff

/*
 * Macros for device 'hps_ARM_timer0', class 'dw_apb_timer_sp'
 * Path to the device is from the master group 'sgdma_0_m_write'.
 * The macros are prefixed with 'SGDMA_0_M_WRITE_HPS_ARM_TIMER0_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_0_M_WRITE_HPS_ARM_TIMER0_COMPONENT_TYPE dw_apb_timer_sp
#define SGDMA_0_M_WRITE_HPS_ARM_TIMER0_COMPONENT_NAME hps_ARM_timer0
#define SGDMA_0_M_WRITE_HPS_ARM_TIMER0_BASE 0xffc08000
#define SGDMA_0_M_WRITE_HPS_ARM_TIMER0_SPAN 256
#define SGDMA_0_M_WRITE_HPS_ARM_TIMER0_END 0xffc080ff

/*
 * Macros for device 'hps_ARM_timer1', class 'dw_apb_timer_sp'
 * Path to the device is from the master group 'sgdma_0_m_write'.
 * The macros are prefixed with 'SGDMA_0_M_WRITE_HPS_ARM_TIMER1_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_0_M_WRITE_HPS_ARM_TIMER1_COMPONENT_TYPE dw_apb_timer_sp
#define SGDMA_0_M_WRITE_HPS_ARM_TIMER1_COMPONENT_NAME hps_ARM_timer1
#define SGDMA_0_M_WRITE_HPS_ARM_TIMER1_BASE 0xffc09000
#define SGDMA_0_M_WRITE_HPS_ARM_TIMER1_SPAN 256
#define SGDMA_0_M_WRITE_HPS_ARM_TIMER1_END 0xffc090ff

/*
 * Macros for device 'hps_ARM_sdrctl', class 'sdrctl'
 * Path to the device is from the master group 'sgdma_0_m_write'.
 * The macros are prefixed with 'SGDMA_0_M_WRITE_HPS_ARM_SDRCTL_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_0_M_WRITE_HPS_ARM_SDRCTL_COMPONENT_TYPE sdrctl
#define SGDMA_0_M_WRITE_HPS_ARM_SDRCTL_COMPONENT_NAME hps_ARM_sdrctl
#define SGDMA_0_M_WRITE_HPS_ARM_SDRCTL_BASE 0xffc25000
#define SGDMA_0_M_WRITE_HPS_ARM_SDRCTL_SPAN 4096
#define SGDMA_0_M_WRITE_HPS_ARM_SDRCTL_END 0xffc25fff

/*
 * Macros for device 'hps_ARM_timer2', class 'dw_apb_timer_osc'
 * Path to the device is from the master group 'sgdma_0_m_write'.
 * The macros are prefixed with 'SGDMA_0_M_WRITE_HPS_ARM_TIMER2_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_0_M_WRITE_HPS_ARM_TIMER2_COMPONENT_TYPE dw_apb_timer_osc
#define SGDMA_0_M_WRITE_HPS_ARM_TIMER2_COMPONENT_NAME hps_ARM_timer2
#define SGDMA_0_M_WRITE_HPS_ARM_TIMER2_BASE 0xffd00000
#define SGDMA_0_M_WRITE_HPS_ARM_TIMER2_SPAN 256
#define SGDMA_0_M_WRITE_HPS_ARM_TIMER2_END 0xffd000ff

/*
 * Macros for device 'hps_ARM_timer3', class 'dw_apb_timer_osc'
 * Path to the device is from the master group 'sgdma_0_m_write'.
 * The macros are prefixed with 'SGDMA_0_M_WRITE_HPS_ARM_TIMER3_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_0_M_WRITE_HPS_ARM_TIMER3_COMPONENT_TYPE dw_apb_timer_osc
#define SGDMA_0_M_WRITE_HPS_ARM_TIMER3_COMPONENT_NAME hps_ARM_timer3
#define SGDMA_0_M_WRITE_HPS_ARM_TIMER3_BASE 0xffd01000
#define SGDMA_0_M_WRITE_HPS_ARM_TIMER3_SPAN 256
#define SGDMA_0_M_WRITE_HPS_ARM_TIMER3_END 0xffd010ff

/*
 * Macros for device 'hps_ARM_clkmgr', class 'clkmgr'
 * Path to the device is from the master group 'sgdma_0_m_write'.
 * The macros are prefixed with 'SGDMA_0_M_WRITE_HPS_ARM_CLKMGR_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_0_M_WRITE_HPS_ARM_CLKMGR_COMPONENT_TYPE clkmgr
#define SGDMA_0_M_WRITE_HPS_ARM_CLKMGR_COMPONENT_NAME hps_ARM_clkmgr
#define SGDMA_0_M_WRITE_HPS_ARM_CLKMGR_BASE 0xffd04000
#define SGDMA_0_M_WRITE_HPS_ARM_CLKMGR_SPAN 4096
#define SGDMA_0_M_WRITE_HPS_ARM_CLKMGR_END 0xffd04fff

/*
 * Macros for device 'hps_ARM_rstmgr', class 'rstmgr'
 * Path to the device is from the master group 'sgdma_0_m_write'.
 * The macros are prefixed with 'SGDMA_0_M_WRITE_HPS_ARM_RSTMGR_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_0_M_WRITE_HPS_ARM_RSTMGR_COMPONENT_TYPE rstmgr
#define SGDMA_0_M_WRITE_HPS_ARM_RSTMGR_COMPONENT_NAME hps_ARM_rstmgr
#define SGDMA_0_M_WRITE_HPS_ARM_RSTMGR_BASE 0xffd05000
#define SGDMA_0_M_WRITE_HPS_ARM_RSTMGR_SPAN 256
#define SGDMA_0_M_WRITE_HPS_ARM_RSTMGR_END 0xffd050ff

/*
 * Macros for device 'hps_ARM_sysmgr', class 'sysmgr'
 * Path to the device is from the master group 'sgdma_0_m_write'.
 * The macros are prefixed with 'SGDMA_0_M_WRITE_HPS_ARM_SYSMGR_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_0_M_WRITE_HPS_ARM_SYSMGR_COMPONENT_TYPE sysmgr
#define SGDMA_0_M_WRITE_HPS_ARM_SYSMGR_COMPONENT_NAME hps_ARM_sysmgr
#define SGDMA_0_M_WRITE_HPS_ARM_SYSMGR_BASE 0xffd08000
#define SGDMA_0_M_WRITE_HPS_ARM_SYSMGR_SPAN 1024
#define SGDMA_0_M_WRITE_HPS_ARM_SYSMGR_END 0xffd083ff

/*
 * Macros for device 'hps_ARM_dma', class 'dma'
 * Path to the device is from the master group 'sgdma_0_m_write'.
 * The macros are prefixed with 'SGDMA_0_M_WRITE_HPS_ARM_DMA_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_0_M_WRITE_HPS_ARM_DMA_COMPONENT_TYPE dma
#define SGDMA_0_M_WRITE_HPS_ARM_DMA_COMPONENT_NAME hps_ARM_dma
#define SGDMA_0_M_WRITE_HPS_ARM_DMA_BASE 0xffe01000
#define SGDMA_0_M_WRITE_HPS_ARM_DMA_SPAN 4096
#define SGDMA_0_M_WRITE_HPS_ARM_DMA_END 0xffe01fff

/*
 * Macros for device 'hps_ARM_spim0', class 'spi'
 * Path to the device is from the master group 'sgdma_0_m_write'.
 * The macros are prefixed with 'SGDMA_0_M_WRITE_HPS_ARM_SPIM0_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_0_M_WRITE_HPS_ARM_SPIM0_COMPONENT_TYPE spi
#define SGDMA_0_M_WRITE_HPS_ARM_SPIM0_COMPONENT_NAME hps_ARM_spim0
#define SGDMA_0_M_WRITE_HPS_ARM_SPIM0_BASE 0xfff00000
#define SGDMA_0_M_WRITE_HPS_ARM_SPIM0_SPAN 256
#define SGDMA_0_M_WRITE_HPS_ARM_SPIM0_END 0xfff000ff

/*
 * Macros for device 'hps_ARM_spim1', class 'spi'
 * Path to the device is from the master group 'sgdma_0_m_write'.
 * The macros are prefixed with 'SGDMA_0_M_WRITE_HPS_ARM_SPIM1_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_0_M_WRITE_HPS_ARM_SPIM1_COMPONENT_TYPE spi
#define SGDMA_0_M_WRITE_HPS_ARM_SPIM1_COMPONENT_NAME hps_ARM_spim1
#define SGDMA_0_M_WRITE_HPS_ARM_SPIM1_BASE 0xfff01000
#define SGDMA_0_M_WRITE_HPS_ARM_SPIM1_SPAN 256
#define SGDMA_0_M_WRITE_HPS_ARM_SPIM1_END 0xfff010ff

/*
 * Macros for device 'hps_ARM_timer', class 'timer'
 * Path to the device is from the master group 'sgdma_0_m_write'.
 * The macros are prefixed with 'SGDMA_0_M_WRITE_HPS_ARM_TIMER_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_0_M_WRITE_HPS_ARM_TIMER_COMPONENT_TYPE timer
#define SGDMA_0_M_WRITE_HPS_ARM_TIMER_COMPONENT_NAME hps_ARM_timer
#define SGDMA_0_M_WRITE_HPS_ARM_TIMER_BASE 0xfffec600
#define SGDMA_0_M_WRITE_HPS_ARM_TIMER_SPAN 256
#define SGDMA_0_M_WRITE_HPS_ARM_TIMER_END 0xfffec6ff

/*
 * Macros for device 'hps_ARM_arm_gic_0', class 'arm_gic'
 * Path to the device is from the master group 'sgdma_0_m_write'.
 * The macros are prefixed with 'SGDMA_0_M_WRITE_HPS_ARM_ARM_GIC_0_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_0_M_WRITE_HPS_ARM_ARM_GIC_0_COMPONENT_TYPE arm_gic
#define SGDMA_0_M_WRITE_HPS_ARM_ARM_GIC_0_COMPONENT_NAME hps_ARM_arm_gic_0
#define SGDMA_0_M_WRITE_HPS_ARM_ARM_GIC_0_BASE 0xfffed000
#define SGDMA_0_M_WRITE_HPS_ARM_ARM_GIC_0_SPAN 4096
#define SGDMA_0_M_WRITE_HPS_ARM_ARM_GIC_0_END 0xfffedfff

/*
 * Macros for device 'hps_ARM_L2', class 'L2'
 * Path to the device is from the master group 'sgdma_0_m_write'.
 * The macros are prefixed with 'SGDMA_0_M_WRITE_HPS_ARM_L2_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_0_M_WRITE_HPS_ARM_L2_COMPONENT_TYPE L2
#define SGDMA_0_M_WRITE_HPS_ARM_L2_COMPONENT_NAME hps_ARM_L2
#define SGDMA_0_M_WRITE_HPS_ARM_L2_BASE 0xfffef000
#define SGDMA_0_M_WRITE_HPS_ARM_L2_SPAN 4096
#define SGDMA_0_M_WRITE_HPS_ARM_L2_END 0xfffeffff

/*
 * Macros for device 'hps_ARM_axi_ocram', class 'axi_ocram'
 * Path to the device is from the master group 'sgdma_0_m_write'.
 * The macros are prefixed with 'SGDMA_0_M_WRITE_HPS_ARM_AXI_OCRAM_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_0_M_WRITE_HPS_ARM_AXI_OCRAM_COMPONENT_TYPE axi_ocram
#define SGDMA_0_M_WRITE_HPS_ARM_AXI_OCRAM_COMPONENT_NAME hps_ARM_axi_ocram
#define SGDMA_0_M_WRITE_HPS_ARM_AXI_OCRAM_BASE 0xffff0000
#define SGDMA_0_M_WRITE_HPS_ARM_AXI_OCRAM_SPAN 65536
#define SGDMA_0_M_WRITE_HPS_ARM_AXI_OCRAM_END 0xffffffff
#define SGDMA_0_M_WRITE_HPS_ARM_AXI_OCRAM_SIZE_MULTIPLE 1
#define SGDMA_0_M_WRITE_HPS_ARM_AXI_OCRAM_SIZE_VALUE 1<<16
#define SGDMA_0_M_WRITE_HPS_ARM_AXI_OCRAM_WRITABLE 1
#define SGDMA_0_M_WRITE_HPS_ARM_AXI_OCRAM_MEMORY_INFO_GENERATE_DAT_SYM 0
#define SGDMA_0_M_WRITE_HPS_ARM_AXI_OCRAM_MEMORY_INFO_GENERATE_HEX 0
#define SGDMA_0_M_WRITE_HPS_ARM_AXI_OCRAM_MEMORY_INFO_MEM_INIT_DATA_WIDTH 16

/*
 * Macros for device 'fifo_HPS_to_FPGA_in', class 'altera_avalon_fifo'
 * The macros are prefixed with 'FIFO_HPS_TO_FPGA_IN_'.
 * The prefix is the slave descriptor.
 */
#define FIFO_HPS_TO_FPGA_IN_COMPONENT_TYPE altera_avalon_fifo
#define FIFO_HPS_TO_FPGA_IN_COMPONENT_NAME fifo_HPS_to_FPGA
#define FIFO_HPS_TO_FPGA_IN_BASE 0x220
#define FIFO_HPS_TO_FPGA_IN_SPAN 8
#define FIFO_HPS_TO_FPGA_IN_END 0x227
#define FIFO_HPS_TO_FPGA_IN_AVALONMM_AVALONMM_DATA_WIDTH 32
#define FIFO_HPS_TO_FPGA_IN_AVALONMM_AVALONST_DATA_WIDTH 32
#define FIFO_HPS_TO_FPGA_IN_BITS_PER_SYMBOL 18
#define FIFO_HPS_TO_FPGA_IN_CHANNEL_WIDTH 0
#define FIFO_HPS_TO_FPGA_IN_ERROR_WIDTH 0
#define FIFO_HPS_TO_FPGA_IN_FIFO_DEPTH 2048
#define FIFO_HPS_TO_FPGA_IN_SINGLE_CLOCK_MODE 0
#define FIFO_HPS_TO_FPGA_IN_SYMBOLS_PER_BEAT 1
#define FIFO_HPS_TO_FPGA_IN_USE_AVALONMM_READ_SLAVE 0
#define FIFO_HPS_TO_FPGA_IN_USE_AVALONMM_WRITE_SLAVE 1
#define FIFO_HPS_TO_FPGA_IN_USE_AVALONST_SINK 0
#define FIFO_HPS_TO_FPGA_IN_USE_AVALONST_SOURCE 1
#define FIFO_HPS_TO_FPGA_IN_USE_BACKPRESSURE 1
#define FIFO_HPS_TO_FPGA_IN_USE_IRQ 0
#define FIFO_HPS_TO_FPGA_IN_USE_PACKET 1
#define FIFO_HPS_TO_FPGA_IN_USE_READ_CONTROL 1
#define FIFO_HPS_TO_FPGA_IN_USE_REGISTER 0
#define FIFO_HPS_TO_FPGA_IN_USE_WRITE_CONTROL 1

/*
 * Macros for device 'message_ready', class 'altera_avalon_pio'
 * The macros are prefixed with 'MESSAGE_READY_'.
 * The prefix is the slave descriptor.
 */
#define MESSAGE_READY_COMPONENT_TYPE altera_avalon_pio
#define MESSAGE_READY_COMPONENT_NAME message_ready
#define MESSAGE_READY_BASE 0x240
#define MESSAGE_READY_SPAN 32
#define MESSAGE_READY_END 0x25f
#define MESSAGE_READY_BIT_CLEARING_EDGE_REGISTER 0
#define MESSAGE_READY_BIT_MODIFYING_OUTPUT_REGISTER 0
#define MESSAGE_READY_CAPTURE 0
#define MESSAGE_READY_DATA_WIDTH 8
#define MESSAGE_READY_DO_TEST_BENCH_WIRING 0
#define MESSAGE_READY_DRIVEN_SIM_VALUE 0
#define MESSAGE_READY_EDGE_TYPE NONE
#define MESSAGE_READY_FREQ 50000000
#define MESSAGE_READY_HAS_IN 0
#define MESSAGE_READY_HAS_OUT 1
#define MESSAGE_READY_HAS_TRI 0
#define MESSAGE_READY_IRQ_TYPE NONE
#define MESSAGE_READY_RESET_VALUE 0

/*
 * Macros for device 'fifo_F2H_DAQ_out', class 'altera_avalon_fifo'
 * The macros are prefixed with 'FIFO_F2H_DAQ_OUT_'.
 * The prefix is the slave descriptor.
 */
#define FIFO_F2H_DAQ_OUT_COMPONENT_TYPE altera_avalon_fifo
#define FIFO_F2H_DAQ_OUT_COMPONENT_NAME fifo_F2H_DAQ
#define FIFO_F2H_DAQ_OUT_BASE 0x250
#define FIFO_F2H_DAQ_OUT_SPAN 8
#define FIFO_F2H_DAQ_OUT_END 0x257
#define FIFO_F2H_DAQ_OUT_AVALONMM_AVALONMM_DATA_WIDTH 32
#define FIFO_F2H_DAQ_OUT_AVALONMM_AVALONST_DATA_WIDTH 32
#define FIFO_F2H_DAQ_OUT_BITS_PER_SYMBOL 32
#define FIFO_F2H_DAQ_OUT_CHANNEL_WIDTH 0
#define FIFO_F2H_DAQ_OUT_ERROR_WIDTH 0
#define FIFO_F2H_DAQ_OUT_FIFO_DEPTH 8192
#define FIFO_F2H_DAQ_OUT_SINGLE_CLOCK_MODE 0
#define FIFO_F2H_DAQ_OUT_SYMBOLS_PER_BEAT 1
#define FIFO_F2H_DAQ_OUT_USE_AVALONMM_READ_SLAVE 1
#define FIFO_F2H_DAQ_OUT_USE_AVALONMM_WRITE_SLAVE 0
#define FIFO_F2H_DAQ_OUT_USE_AVALONST_SINK 1
#define FIFO_F2H_DAQ_OUT_USE_AVALONST_SOURCE 0
#define FIFO_F2H_DAQ_OUT_USE_BACKPRESSURE 1
#define FIFO_F2H_DAQ_OUT_USE_IRQ 0
#define FIFO_F2H_DAQ_OUT_USE_PACKET 0
#define FIFO_F2H_DAQ_OUT_USE_READ_CONTROL 1
#define FIFO_F2H_DAQ_OUT_USE_REGISTER 0
#define FIFO_F2H_DAQ_OUT_USE_WRITE_CONTROL 1


#endif /* _ALTERA_HPS_ARM_H_ */
